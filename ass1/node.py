import random
from transaction import Transaction
from event_queue import event_queue
from params import *
from event import Event
from packet import Packet

event_dict = {0:"Generate Txn",1:"Send Txn",2:"Receive Txn",3:"Generate Blk",4:"Send Blk",5:"Receive Blk"}

class Node:
    """
    Represents a node in the network
    """ 
    
    available_txn_ids = 0
    
    def __init__(self,id:int,slow:bool,low_cpu:bool,peers:list) -> None:
        """Initializes a new node in the network 

        Args:
            id (int): Unique descriptor of the node
            slow (bool): relative measure of the node's network speed
            low_cpu (bool): relative measure of the node's CPU speed
            peers (list): list of peers of the node
        """
        self.id = id
        self.slow = slow
        self.low_cpu = low_cpu
        self.peers = peers
        self.time_last_txn_gen = 0
        if self.id == 0:
            self.generate_txn()
        self.txns = []
        self.seen_txn_ids = set()
     
    def __str__(self) -> str:
        """
        prints the node's id, peers, slow and low_cpu
        Returns:
            str: string representation of the node
        """
        return f"Node {self.id} has peers {self.peers} and is slow: {self.slow} and has low cpu: {self.low_cpu}\n"
    
    def generate_txn(self) -> None:
        """
        generates a transaction for the node

        Returns:
            Transaction: transaction generated by the node
        """
        # get a unique transaction id
        txnId = Node.available_txn_ids
        Node.available_txn_ids += 1
        # generate a random receiver
        receiver_id = random.randint(0,n-1)
        # avoid self transactions
        if receiver_id == self.id:
            receiver_id = (receiver_id+1)%n
        # generate a random amount
        amount = random.randint(1,50)
        # create a new transaction
        txn = Transaction(txnId,self.id,receiver_id,amount)
        # find the time at which the transaction is generated
        trigger_time = self.time_last_txn_gen + random.expovariate(1/inter_txn_time)
        # creat a fake receive event from -1 to self.id
        txn_receive_event = Event(trigger_time,2,self.id,Packet(-1,self.id,txn))
        # create next transaction generation event
        # next_txn_gen_event = Event(trigger_time,0,self.id,Packet(-1,-1,Transaction(-1,-1,-1,-1)))
        # add the events to the event queue
        event_queue.add_event(txn_receive_event)
        # event_queue.add_event(next_txn_gen_event)
        # update the time of last transaction generation
        self.time_last_txn_gen = trigger_time
        # add the transaction to the node's list of transactions
    
    def send_txn(self,txn:Transaction) -> None:
        # send this transaction to all peers except the sender
        
        pass
    
    def receive_txn(self,packet:Packet,received_time:float) -> None:
        print(packet)
        sender_id = packet.source
        txn = packet.data
        
        if txn.id in self.seen_txn_ids:
            return
        self.txns.append(txn)
        self.seen_txn_ids.add(txn.id)
        
        for peer in self.peers:
            if peer != sender_id:
                event_queue.add_event(Event(received_time+10,2,peer,Packet(self.id,peer,txn)))

        
        
        